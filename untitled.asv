clear all
close all
clc

% phase_grad = @(x, z) [k*x./R(z);k - k*x.^2./(2*R(z).^2).*(1 - z0^2./z.^2) - w0^2./w(z).^2];
% phase_grad_s = phase_grad(x, z);
% k_vec = phase_grad_s/vecnorm(phase_grad_s);

% ns = [sin(theta);cos(theta)];
% 
% theta_i = acos(transpose(ns)*k_vec);

%% 
lambda0 = 670e-9;

n1 = 1.51;
n2 = 0.13767 + 1j*3.7917; % Refractive Index (Gold - Johnson and Christy)
n3 = 1.33; % water

theta0 = 5/180*pi;
lambda1 = lambda0/n1;

k = 2*pi/lambda1;

w0 = lambda1/(pi*theta0);
z0 = lambda1/(pi*theta0^2);

%%

s = linspace(-30e-6, 30e-6, 2^12);

theta = 68/180*pi;

x = s*cos(theta);
z = -s*sin(theta);

U = gb_complex_amplitude(x, z, k, w0, z0);

[A, fs] = angular_spectrum(U, s);

% ignore evanescent fields
alpha = fs*lambda1;

A  = A(abs(alpha) < 1);
fs = fs(abs(alpha) < 1);
ang = real(asin(fs*lambda1));

[rp, tp, ~] = fresnel_coefficients_p(ang, n1, n2, n3, 50e-9, lambda0);
Ar = A.*rp;

A1i = Ar;

% angular spectrum propagation transfer function.
H_as = @(fx, z) exp(1j*2*pi*z*sqrt((1/lambda1^2) - fx.^2));

z = linspace(-10e-6,0, length(fs))';

A1 = H_as(fs, z)*A + H_as(fs, -z);

[U1, sp] = i_angular_spectrum(A1, fs);

figure
image(sp, z, abs(U1), 'CDataMapping', 'scaled')
axis equal
colorbar

%%
function U = gb_complex_amplitude(x, z, k, w0, z0)

w = w0*sqrt(1 + (z/z0).^2);

if z ~= 0
    R = z.*(1 + (z0./z).^2);
    eta = atan(z/z0);
    
    phi = k*z + k*x.^2./(2*R) - eta;
else
    phi = 0;
end

U = w0./w.*exp(-x.^2./w.^2).*exp(-1j*phi);

end

function [rp, tp, ap] = fresnel_coefficients_p(theta_i, n1, n2, n3, dk, lambda0)

qk = @(n1, nk) sqrt(nk^2 - n1^2*sin(theta_i).^2)/nk^2;

q1 = qk(n1, n1);

q2 = qk(n1, n2);
q3 = qk(n1, n3);

beta_2 = (2*pi*dk/lambda0)*sqrt(n2^2 - n1^2*sin(theta_i).^2);

m11 = cos(beta_2);
m12 = -1j*sin(beta_2)./q2;
m21 = -1j*q2.*sin(beta_2);
m22 = cos(beta_2);

a = (m11 + m12.*q3);
b = (m21 + m22.*q3);

c = a.*q1 + b;
d = a.*q1 - b;

rp = d./c;
tp = 2*q1./c;
ap = 4*q1.*real(a.*conj(b) - q3)./(c.*conj(c));

end

function [A, fx] = angular_spectrum(U, x)

Fs = 1/mean(diff(x));
L = 2^nextpow2(length(x));

A  = fft(U, L, 2)/L;
fx = (Fs/L)*[0,(1:L/2),-(1:L/2)];

end

function [U, x] = i_angular_spectrum(A, fx)

dx = 1/mean(diff(fx));
L = 2^nextpow2(length(fx));

U = ifft(A, L, 2);
x = (dx/L)*(-L/2:L/2-1);

end

